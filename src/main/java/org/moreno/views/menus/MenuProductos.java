package org.moreno.views.menus;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.moreno.components.DnDTabbedPane;
import org.moreno.utilities.Utilities;
import org.moreno.views.tabs.TabProducts;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Locale;

public class MenuProductos {
    private JPanel contentPane;
    private JButton btnProducts;
    private JButton btnCardex;
    private JButton btnEntradasCanceladas;
    private DnDTabbedPane tabContenido;
    private TabProducts tabProducts;

    public MenuProductos(DnDTabbedPane tabContenido) {
        this.tabContenido = tabContenido;
        btnProducts.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                loadProducts();
            }
        });
        btnEntradasCanceladas.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
            }
        });
        btnCardex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
            }
        });
    }

    public void loadProducts() {
        btnEntradasCanceladas.setBackground(new JButton().getBackground());
        btnEntradasCanceladas.setForeground(new JButton().getForeground());
        Utilities.buttonSelectedOrEntered2(btnProducts);
        btnProducts.setForeground(Color.white);
        if (tabProducts == null) {
            tabProducts = new TabProducts();
        }
        if (tabContenido.indexOfComponent(tabProducts.getContentPane()) == -1) {
            tabProducts = new TabProducts();
            tabProducts.getContentPane().setOption(btnProducts);
            tabContenido.addTab(tabProducts.getContentPane().getTitle(), tabProducts.getContentPane().getIcon(), tabProducts.getContentPane());

        }
        tabContenido.setSelectedComponent(tabProducts.getContentPane());
    }

    public JPanel getContentPane() {
        return contentPane;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(4, 1, new Insets(10, 5, 5, 5), -1, 10));
        contentPane.setBackground(new Color(-4342339));
        contentPane.setMaximumSize(new Dimension(140, 2147483647));
        contentPane.setMinimumSize(new Dimension(140, 157));
        contentPane.setPreferredSize(new Dimension(140, 149));
        btnProducts = new JButton();
        btnProducts.setFocusPainted(false);
        Font btnProductsFont = this.$$$getFont$$$(null, -1, 14, btnProducts.getFont());
        if (btnProductsFont != null) btnProducts.setFont(btnProductsFont);
        btnProducts.setText("<html><center>Productos<center></html>");
        contentPane.add(btnProducts, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        contentPane.add(spacer1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        btnEntradasCanceladas = new JButton();
        btnEntradasCanceladas.setFocusPainted(false);
        Font btnEntradasCanceladasFont = this.$$$getFont$$$(null, -1, 14, btnEntradasCanceladas.getFont());
        if (btnEntradasCanceladasFont != null) btnEntradasCanceladas.setFont(btnEntradasCanceladasFont);
        btnEntradasCanceladas.setText("<html><center>Entradas canceladas<center></html>");
        contentPane.add(btnEntradasCanceladas, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btnCardex = new JButton();
        btnCardex.setFocusPainted(false);
        Font btnCardexFont = this.$$$getFont$$$(null, -1, 14, btnCardex.getFont());
        if (btnCardexFont != null) btnCardex.setFont(btnCardexFont);
        btnCardex.setText("<html><center>Cardex de productos<center></html>");
        contentPane.add(btnCardex, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
